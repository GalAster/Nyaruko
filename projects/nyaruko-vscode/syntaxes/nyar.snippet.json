{
    "Class Declare Statement": {
        "prefix": "Class Declare Statement",
        "body": [
            "Class ${1:name} {",
            "\tself=${1:name}",
            "}"
        ],
        "description": "Declare a Class"
    },
    "Class Extend Statement": {
        "prefix": "Class Extend Statement",
        "body": [
            "Class ${1:name} Extend ${2:father} {",
            "\tself=${1:name}",
            "\tsuper=${2:father}",
            "}"
        ],
        "description": "Extend a Class"
    },
    "Class Mixin Statement": {
        "prefix": "Class Mixin Statement",
        "body": [
            "Class ${1:name} Mixin ${2:father} ${3:relative} {",
            "\tself=${1:name}",
            "\tsuper=${2:father}",
            "\tmixin=${3:relative}",
            "}"
        ],
        "description": "Mixin Classes"
    },
    "Comment": {
        "prefix": "Comment",
        "body": [
            "%%%",
            "$0",
            "%%%"
        ],
        "description": "Comment"
    },
    "Do-While Statement": {
        "prefix": "Do-While Statement",
        "body": [
            "do {",
            "\t$0",
            "} while (${1:condition});"
        ],
        "description": "Do-While Statement"
    },
    "For Range Loop": {
        "prefix": "For Range Loop",
        "body": [
            "For $1 In range($2) {",
            "\t$0",
            "}"
        ],
        "description": "For a In range(b){f(a)}"
    },
    "Function Statement": {
        "prefix": "Function Statement",
        "body": [
            "${1:name}::Auto => Auto",
            "${1:name}(${2:var}) := {",
            "\t$0",
            "\treturn()",
            "}"
        ],
        "description": "Function Statement"
    },
    "If Statement": {
        "prefix": "If Statement",
        "body": [
            "if (${1:condition}) {",
            "\t${2:true_then}",
            "}"
        ],
        "description": "If Statement"
    },
    "If-Else Statement": {
        "prefix": "If-Else Statement",
        "body": [
            "if (${1:condition}) {",
            "\t${2:true_then}",
            "}",
            "else {",
            "\tfalse_then",
            "}"
        ],
        "description": "If-Else Statement"
    },
    "If-Else-Otherwise Statement": {
        "prefix": "If-Else-Otherwise Statement",
        "body": [
            "if (${1:condition}) {",
            "\t${2:true_then}",
            "}",
            "else {",
            "\tfalse_then",
            "}",
            "otherwise {",
            "\tunknow_then",
            "}"
        ],
        "description": "If Condition\tTrue/False/Unknow"
    },
    "Import Module Alias": {
        "prefix": "Import Module Alias",
        "body": [
            "Import \"${1:module}\" As { $2 }"
        ],
        "description": "Import module As alias"
    },
    "Import Symbol Alias": {
        "prefix": "Import Symbol Alias",
        "body": [
            "Import \"${1:module}\" Of { $2 }"
        ],
        "description": "Import (module1, module2) Of { symbol As alias }"
    },
    "Import Symbol All": {
        "prefix": "Import Symbol All",
        "body": [
            "Import \"${1:module}\" All"
        ],
        "description": "Import all symbol in module1"
    },
    "Include Statement": {
        "prefix": "Include Statement",
        "body": [
            "Import \"${1:def}\" Instance"
        ],
        "description": "Import Definition Instance"
    },
    "Log to the console": {
        "prefix": "Log to the console",
        "body": [
            "console.log($1);",
            "$0"
        ],
        "description": "Log to the console"
    },
    "NeuralNetwork Graph Template": {
        "prefix": "NeuralNetwork Graph Template",
        "body": [
            "Template Graph ${1:name}() {",
            "\t%%% doc",
            "\t@param: ",
            "\t@return: Class ${1:name} Extends NeuralNetwork.Graph",
            "\t%%%",
            "\t${0:defitions}",
            "\tInputs {",
            "\t\tInput::Tensor<[], Real32>",
            "\t}",
            "\tOutputs {",
            "\t\tOutput::Tensor<[], Real32>",
            "\t}",
            "\tGraph {",
            "\t\tInput > Output",
            "\t}",
            "}"
        ],
        "description": "Template tp_name sym_name {}"
    },
    "Property Getter": {
        "prefix": "Property Getter",
        "body": [
            "Getter {",
            "\tget() := return(self)",
            "}"
        ],
        "description": "Property getter"
    },
    "Property Setter": {
        "prefix": "Property Setter",
        "body": [
            "Overloader {",
            "\tset() := $2;",
            "}"
        ],
        "description": "Property setter"
    },
    "Switch Statement": {
        "prefix": "Switch Statement",
        "body": [
            "switch (${1:expr}) {",
            "\t${2:case1},",
            "\tdo something",
            "\t*,",
            "\tdo default",
            "}"
        ],
        "description": "Switch Statement"
    },
    "Throw Exception": {
        "prefix": "Throw Exception",
        "body": [
            "throw \"$1\";",
            "$0"
        ],
        "description": "Throw Exception"
    },
    "Try-Catch Statement": {
        "prefix": "Try-Catch Statement",
        "body": [
            "try (",
            "\t$0",
            ")",
            "catch(${1:error}) { ",
            "\t",
            "}"
        ],
        "description": "Try-Catch Statement"
    },
    "With Statement": {
        "prefix": "With Statement",
        "body": [
            "With ${1:symbol} As ${2:alias} {",
            "\t$0",
            "}"
        ],
        "description": "While Statement"
    }
}